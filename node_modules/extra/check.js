const express = require("express");
const http = require("http");
const path=require("path")
var cors = require("cors"); 
const socketIo = require("socket.io");
const app = express();
const session=require("express-session")
const uuid=require("uuid")
const bodyParser = require("body-parser");
let z;
app.use(bodyParser.urlencoded({ extended: true }));

app.use(cors({
  origin: "*", // Update to match your frontend's origin
  methods: ["GET", "POST", "PUT"], // Correct case for "PUT"
  allowedHeaders: [
    "Content-Type",
    "X-Auth-Token",
    "Origin",
    "Authorization", // Corrected spelling
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Origin",
    "Accept",
    "X-Requested-With",
    "Access-Control-Request-Method",
    "Access-Control-Request-Headers",
  ],
  credentials: true, // Corrected key to lowercase
}));
app.use(session({
  genid:(req)=>{
      return uuid.v4()
  },
  secret:"hello",
  resave:false,
  saveUninitialized:true
}))
let p=[];
/*
app.use(cors({
  origin:"*",
}));*/
app.use(express.static(path.join(__dirname)));
app.get("/",(req,res)=>{
  res.sendFile(__dirname+"/form.html")
})
app.post('/login',(req,res)=>{
  req.session.userId=req.body.i1
  res.redirect("/welcome")
  // res.send(`hello ${req.session.userId} `)
})
app.get("/welcome",(req,res)=>{
  res.sendFile(__dirname+"/base.html")
})
app.post("/index",(req,res)=>{
  res.redirect("/chat")
})


const server = http.createServer(app);
const io = socketIo(server);
console.log(__dirname);
const users = {};
app.get("/chat",(req,res)=>{
  res.sendFile(__dirname+"/index.html")
io.on("connection", (socket) => {
  socket.on("new-user", (name) => {
    z=name.room
    console.log(z)
    socket.join(z)
    users[socket.id] = name.name;
    console.log(name)
    p.push(name.name)
    console.log(p)
    socket.to(z).emit("userjoined",name);
    console.log("bjjfd")
    
  });

  socket.on("send", (message) => {
    socket.to(z).emit("receieve", { message: message, name: users[socket.id],room:z });
  });


  socket.on("disconnect", () => {
    console.log(z);
    const userName = users[socket.id];
    socket.leave(z);
    p=p.filter((item)=>
      (item!=userName)
    )
    console.log("exit", userName);
    socket.to(z).emit("dist", userName);
    console.log(p) // Notify other users in the room
});

});
})
server.listen(8000, () => {
  console.log("Server is running on port 8000");
});
